// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Router, Todo, TodoCtrl;
    window.TD = {
      Todo: Todo = (function() {
        function Todo(id, title) {
          this.id = id;
          this.title = title;
          this.status = __bind(this.status, this);
          this.complete = false;
        }

        Todo.prototype.status = function() {
          if (this.editing) {
            return 'editing';
          }
          if (this.complete) {
            return 'completed';
          }
          return 'incomplete';
        };

        return Todo;

      })(),
      TodoCtrl: TodoCtrl = (function(_super) {
        __extends(TodoCtrl, _super);

        function TodoCtrl(el) {
          this.update_toggle_all = __bind(this.update_toggle_all, this);
          this.filter = __bind(this.filter, this);
          this.clear_completed = __bind(this.clear_completed, this);
          this.show_completed = __bind(this.show_completed, this);
          this.incomplete_count = __bind(this.incomplete_count, this);
          this.incomplete = __bind(this.incomplete, this);
          this.complete_count = __bind(this.complete_count, this);
          this.complete = __bind(this.complete, this);
          this.toggle_all_todos = __bind(this.toggle_all_todos, this);
          this.has_todos = __bind(this.has_todos, this);
          this.stop_editing = __bind(this.stop_editing, this);
          this.edit = __bind(this.edit, this);
          this.destroy = __bind(this.destroy, this);
          this.create = __bind(this.create, this);
          this.nextId = __bind(this.nextId, this);
          TodoCtrl.__super__.constructor.apply(this, arguments);
          this._id = 1;
          this.todos = [];
          this.new_todo_input = this.$(".new-todo");
          this.toggle_all = false;
          this.turn_off_toggle_all = false;
        }

        TodoCtrl.prototype.nextId = function() {
          return this._id++;
        };

        TodoCtrl.prototype.create = function() {
          var title, todo;
          title = this.new_todo_input.val().trim();
          if (!(title.length > 0)) {
            return;
          }
          todo = new TD.Todo(this.nextId(), title);
          this.todos.unshift(todo);
          this.new_todo_input.val("");
          this.turn_off_toggle_all = this.toggle_all;
          return this.toggle_all = false;
        };

        TodoCtrl.prototype.destroy = function(e, todo) {
          return this.todos.splice(this.todos.indexOf(todo), 1);
        };

        TodoCtrl.prototype.edit = function(e, todo) {
          return todo.editing = true;
        };

        TodoCtrl.prototype.stop_editing = function(e, todo) {
          var input;
          if (!e.hasClass('edit')) {
            input = $(".edit", e);
          } else {
            input = e;
          }
          todo.title = input.val().trim();
          todo.editing = false;
          if (todo.title.length === 0) {
            return this.todos.splice(this.todos.indexOf(todo), 1);
          }
        };

        TodoCtrl.prototype.has_todos = function() {
          return this.todos.length > 0;
        };

        TodoCtrl.prototype.toggle_all_todos = function(e) {
          var todo, _i, _len, _ref;
          if (this.turn_off_toggle_all) {
            return this.turn_off_toggle_all = false;
          }
          _ref = this.filteredTodos;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todo = _ref[_i];
            todo.complete = this.toggle_all;
          }
          return null;
        };

        TodoCtrl.prototype.complete = function() {
          var todo, _i, _len, _ref, _results;
          _ref = this.todos;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todo = _ref[_i];
            if (todo.complete === true) {
              _results.push(todo);
            }
          }
          return _results;
        };

        TodoCtrl.prototype.complete_count = function() {
          return this.complete().length;
        };

        TodoCtrl.prototype.incomplete = function() {
          var todo, _i, _len, _ref, _results;
          _ref = this.todos;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todo = _ref[_i];
            if (todo.complete !== true) {
              _results.push(todo);
            }
          }
          return _results;
        };

        TodoCtrl.prototype.incomplete_count = function() {
          return this.incomplete().length;
        };

        TodoCtrl.prototype.show_completed = function() {
          return this.complete_count() > 0;
        };

        TodoCtrl.prototype.clear_completed = function() {
          this.todos = this.incomplete();
          return this.filter();
        };

        TodoCtrl.prototype.filter = function() {
          if (TD.filter === "") {
            TD.filter = "/";
          }
          if (TD.filter === "/") {
            this.filteredTodos = this.todos;
          }
          if (TD.filter === "/active") {
            this.filteredTodos = this.incomplete();
          }
          if (TD.filter === "/completed") {
            return this.filteredTodos = this.complete();
          }
        };

        TodoCtrl.prototype.update_toggle_all = function() {
          var count;
          count = this.complete_count();
          this.toggle_all = count > 0 && count === this.todos.length;
          return this.filter();
        };

        TodoCtrl.watchers = {
          'toggle_all': TodoCtrl.prototype.toggle_all_todos,
          'TD.filter': TodoCtrl.prototype.filter,
          'incomplete_count': TodoCtrl.prototype.update_toggle_all,
          'complete_count': TodoCtrl.prototype.update_toggle_all
        };

        return TodoCtrl;

      })(Runtime.Controllers.Base),
      Router: Router = (function() {
        function Router() {
          this.route = __bind(this.route, this);
        }

        Router.prototype.route = function(hash) {
          TD.filter = hash.substr(1);
          $('.filters a').removeClass('selected');
          return $("a[href='" + hash + "']").addClass('selected');
        };

        return Router;

      })()
    };
    Runtime.addFilter('pluralize', function(amount, str) {
      if (Math.abs(amount) !== 1) {
        return str.pluralize();
      } else {
        return str;
      }
    });
    Runtime.setContext('TD');
    Runtime.setRouter(new TD.Router);
    Runtime.compile(document);
    return Runtime.apply(function() {
      return Runtime.router.route(location.hash);
    });
  });

}).call(this);
